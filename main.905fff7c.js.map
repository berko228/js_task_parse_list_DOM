{"version":3,"sources":["scripts/main.js"],"names":["employers","document","querySelector","empArr","children","convertToNum","num","slice","split","join","sortList","employerL","sorted","sort","a","b","dataset","salary","append","getEmployers","listEmp","map","employer","name","innerText"],"mappings":";AAAA,aAyBA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAvBA,IAAMA,EAAYC,SAASC,cAAc,MAEnCC,EAAaH,EAAAA,EAAUI,UAE7B,SAASC,EAAaC,GACb,OAAEA,EAAIC,MAAM,GAAGC,MAAM,KAAKC,KAAK,IAGxC,SAASC,EAASC,GACVC,IAAAA,EAASD,EAAUE,KAAK,SAACC,EAAGC,GAChCV,OAAAA,EAAaU,EAAEC,QAAQC,QAAUZ,EAAaS,EAAEE,QAAQC,UAE1DjB,EAAUkB,OAAVlB,MAAAA,EAAoBY,EAAAA,IAGtB,SAASO,EAAaC,GACbA,OAAAA,EAAQC,IAAI,SAAAC,GAAQ,OAAA,EAAA,CACzBC,KAAMD,EAASE,WACZF,EAASN,WAIhBN,EAASP,GACTgB,EAAahB","file":"main.905fff7c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst employers = document.querySelector('ul');\n\nconst empArr = [...employers.children];\n\nfunction convertToNum(num) {\n  return +(num.slice(1).split(',').join(''));\n}\n\nfunction sortList(employerL) {\n  const sorted = employerL.sort((a, b) =>\n    convertToNum(b.dataset.salary) - convertToNum(a.dataset.salary));\n\n  employers.append(...sorted);\n}\n\nfunction getEmployers(listEmp) {\n  return listEmp.map(employer => ({\n    name: employer.innerText,\n    ...employer.dataset,\n  }));\n};\n\nsortList(empArr);\ngetEmployers(empArr);\n"]}